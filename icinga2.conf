/*
 * Initialise an API listener using signed certificates from the master 
 * node. Our client will communicate with its parent node through the
 * Icinga2 API.
 */
object ApiListener "api" {
  cert_path = SysconfDir + "/icinga2/pki/%%CLIENT_NAME%%.crt"
  key_path = SysconfDir + "/icinga2/pki/%%CLIENT_NAME%%.key"
  ca_path = SysconfDir + "/icinga2/pki/ca.crt"

  accept_config = true
  accept_commands = true
}


/* Define the Icing child-parent relationship for this node. */
object Endpoint "%%PARENT_NAME%%" {
	host = "%%PARENT_IP%%"
	port = "5665"
}

object Zone "%%PARENT_ZONE%%" {
	endpoints = [ "%%PARENT_NAME%%" ]
}

object Endpoint "%%CLIENT_NAME%%" {
}

object Zone "%%CLIENT_NAME%%" {
	endpoints = [ "%%CLIENT_NAME%%" ]
	parent = "%%PARENT_ZONE%%"
}

/* Initialise a global zone that will sync most config to the client. */
object Zone "global-templates" {
	global = true
}


/* Include config that is enabled using the `icinga2 feature` commands */
include "features-enabled/*.conf"

/*
 * Although we believe these are not called anywhere we define these constants 
 * just in case. For simplicity we match the node and zone names.
 */ 
const NodeName = "%%CLIENT_NAME%%"
const ZoneName = NodeName

/**
 * The Icinga Template Library (ITL) provides a number of useful templates
 * and command definitions.
 * Common monitoring plugin command definitions are included separately.
 */
include <itl>
include <plugins>
include <plugins-contrib>
include <manubulon>       // Manubulon SNMP
include <windows-plugins> 
include <nscp>            // NSClient++ command templates

/* Define paths where the plugin binaries are found. */
const PluginDir = PrefixDir + "/sbin"
const ManubulonPluginDir = PrefixDir + "/sbin"
const PluginContribDir = PrefixDir + "/sbin"

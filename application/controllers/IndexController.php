<?php

//namespace Icinga\Module\Agentinstaller\Forms\AgentInstaller;
//namespace Icinga\Module\Agentinstaller\Controllers;

use Icinga\Web\Controller;
use Icinga\Web\Session;
use Icinga\Forms\AgentInstaller;
use Icinga\Module\Agentinstaller\Forms\CreateInstallerForm;

class AgentInstaller_IndexController extends Controller {
    public function indexAction()
    {
        $form = $this->view->form = new CreateInstallerForm;
    }
    
    public function generateAction(){
	//Setup
	$client_name = $_GET['clientdomain'];
	$parent_name = $_GET['parentdomain'];
	$zone_name = $_GET['zonename'];

	$master_port = "5665";
	$output_dir = "/var/www/icingaclient/";

	$server_zones_file = $output_dir . "$parent_name/$client_name.conf";
	
	if (file_exists($zone_name)){
	    echo "Client zones file ($server_zones_file) exists.";
	    return 1;
	}

	$check_exists = shell_exec('icinga object list --type Host --name ' . escapeshellarg($client_name));
	if (strlen($check_exists) > 0) {
	    echo "A host client already exists with that name: $client_name";
	    return 1;
	}

	//get hostname IPs
	$client_ip = gethostbyname($client_name);
	$parent_ip = gethostbyname($parent_name);

	//generate master config file
	$config = <<<EOT
/* Generated by Agent Installer */
object Endpoint "$client_name" {
        host = "$client_ip"
       	port = "5665"
}

object Zone "$client_name" {
        endpoints = [ "$client_name" ]
       	parent = "$parent_name"
}

object Host "$client_name" {
        import "generic-host"
        address = "$client_ip"
q
        vars.os = "windows"
        vars.client_endpoint = name
}
EOT;
	
	if(!is_dir($output_dir . $parent_name)){
 	    mkdir($output_dir . $parent_name);
	}

	$result = file_put_contents($server_zones_file, $config);

	//Generate ssl keys
	$safe_client = escapeshellarg($client_name);

	$cert_res = shell_exec("sudo -u nagios icinga2 pki new-cert ".
		"--cn {$output_dir}_working_dir/$safe_client ".
		"--key {$output_dir}_working_dir/$safe_client.key ".
		"--csr {$output_dir}_working_dir/$safe_client.csr");

	$csr_res = shell_exec("sudo -u nagios icinga2 pki sign-csr ".
		"--csr $output_dir"."_working_dir/$safe_client.csr ".
		"--cert $output_dir"."_working_dir/$safe_client.crt");

	//Generate config file for client
	$client_config = <<<EOT
/*
 * Initialise an API listener using signed certificates from the master 
 * node. Our client will communicate with its parent node through the
 * Icinga2 API.
 */
object ApiListener "api" {
  cert_path = SysconfDir + "/icinga2/pki/$client_name.crt"
  key_path = SysconfDir + "/icinga2/pki/$client_name.key"
  ca_path = SysconfDir + "/icinga2/pki/ca.crt"

  accept_config = true
  accept_commands = true
}


/* Define the Icing child-parent relationship for this node. */
object Endpoint "$parent_name" {
	host = "$parent_ip"
	port = "5665"
}

object Zone "$zone_name" {
	endpoints = [ "$parent_name" ]
}

object Endpoint "$client_name" {
}

object Zone "$client_name" {
	endpoints = [ "$client_name" ]
	parent = "$parent_name"
}

/* Initialise a global zone that will sync most config to the client. */
object Zone "global-templates" {
	global = true
}


/* Include config that is enabled using the `icinga2 feature` commands */
include "features-enabled/*.conf"

/*
 * Although we believe these are not called anywhere we define these constants 
 * just in case. For simplicity we match the node and zone names.
 */ 
const NodeName = "$client_name"
const ZoneName = NodeName

/**
 * The Icinga Template Library (ITL) provides a number of useful templates
 * and command definitions.
 * Common monitoring plugin command definitions are included separately.
 */
include <itl>
include <plugins>
include <plugins-contrib>
include <manubulon>       // Manubulon SNMP
include <windows-plugins> 
include <nscp>            // NSClient++ command templates

/* Define paths where the plugin binaries are found. */
const PluginDir = PrefixDir + "/sbin"
const ManubulonPluginDir = PrefixDir + "/sbin"
const PluginContribDir = PrefixDir + "/sbin"
EOT;

	//generate the parsed icinga2.conf to the appropriate directory
	$result = file_put_contents($output_dir."_working_dir/icinga2.conf", $client_config);

	//run setup generator
	shell_exec("sudo -u nagios makensis \"-XOutFile ${output_dir}_builds/{$client_name}_setup.exe\" -DPARENT_NAME=$parent_name -DCLIENT_NAME=$client_name ${output_dir}_working_dir/icinga2-setup-windows-child.nsis");

	//cleanup files
	unlink("{$output_dir}_working_dir/{$client_name}.crt");
	unlink("{$output_dir}_working_dir/{$client_name}.csr");
	unlink("{$output_dir}_working_dir/{$client_name}.key");

	//Download link, necessary due to everthing being an XHR request
	echo "<a href='../download?clientname=${client_name}' target='_blank'>Download installer</a>";
	
    }
}
